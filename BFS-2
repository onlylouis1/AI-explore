#include<iostream>
using namespace std;

class EightNumbers;

class Node
{
	friend class Eight;
	private:
		int nine[9];
		int father;
};

class Eight
{
	private:
		int flag_head;
		int flag_tail;
		Node start;
		Node end;
		Node node[10000];
	public:
		void Init();
		bool Solve_Equal(int a[9],int b[9]);
		void Solve_Extend(Node nd);
		void Solve();
};

void Eight::Init() 
{
	cout<<"输入初始状态 : ";
	cin>>start.nine[0]>>start.nine[1]>>start.nine[2]
	   >>start.nine[3]>>start.nine[4]>>start.nine[5]
	   >>start.nine[6]>>start.nine[7]>>start.nine[8];
	start.father=0;
	cout<<"\n";
	cout<<"输入目标状态 : ";
	cin>>end.nine[0]>>end.nine[1]>>end.nine[2]
	   >>end.nine[3]>>end.nine[4]>>end.nine[5]
	   >>end.nine[6]>>end.nine[7]>>end.nine[8];
	end.father=0;
	node[1]=start;
	flag_head=1;
	flag_tail=2;
}

bool Eight::Solve_Equal(int a[9],int b[9])
{
	int i;
	for(i=0;i<9;i=i+1)
		if(a[i]!=b[i]) break;
	if(i==9) return true;
	else return false;
}

void Eight::Solve_Extend(Node nd)
{
	bool left,up,right,down;
	int i;
	for(i=0;i<9;i=i+1)
		if(nd.nine[i]==0) break;
	if(i==0) { left=false; up=false; right=true; down=true; }
	else if(i==1) { left=true; up=false; right=true; down=true; }
	else if(i==2) { left=true; up=false; right=false; down=true; }
	else if(i==3) { left=false; up=true; right=true; down=true; }
	else if(i==4) { left=true; up=true; right=true; down=true; }
	else if(i==5) { left=true; up=true; right=false; down=true; }
	else if(i==6) { left=false; up=true; right=true; down=false; }
	else if(i==7) { left=true; up=true; right=true; down=false; }
	else if(i==8) { left=true; up=true; right=false; down=false; }
	
	Node nd0;
	if(left==true)
	{
		nd0=nd;
		nd0.nine[i]=nd0.nine[i-1];
		nd0.nine[i-1]=0;
		if(flag_head==1||Solve_Equal(nd0.nine,node[node[flag_head].father].nine)==false)
		{
			nd0.father=flag_head;
			node[flag_tail]=nd0;
			flag_tail=flag_tail+1;
		}
	}
	if(up==true)
	{
		nd0=nd;
		nd0.nine[i]=nd0.nine[i-3];
		nd0.nine[i-3]=0;
		if(flag_head==1||Solve_Equal(nd0.nine,node[node[flag_head].father].nine)==false)
		{
			nd0.father=flag_head;
			node[flag_tail]=nd0;
			flag_tail=flag_tail+1;
		}
	}
	if(right==true)
	{
		nd0=nd;
		nd0.nine[i]=nd0.nine[i+1];
		nd0.nine[i+1]=0;
		if(flag_head==1||Solve_Equal(nd0.nine,node[node[flag_head].father].nine)==false)
		{
			nd0.father=flag_head;
			node[flag_tail]=nd0;
			flag_tail=flag_tail+1;
		}
	}
	if(down==true)
	{
		nd0=nd;
		nd0.nine[i]=nd0.nine[i+3];
		nd0.nine[i+3]=0;
		if(flag_head==1||Solve_Equal(nd0.nine,node[node[flag_head].father].nine)==false)
		{
			nd0.father=flag_head;
			node[flag_tail]=nd0;
			flag_tail=flag_tail+1;
		}
	}
}

void Eight::Solve()
{
	bool se;
	while(1)
	{
		se=Solve_Equal(node[flag_head].nine,end.nine);
		if(se==true) break;
		else
			Solve_Extend(node[flag_head]);
		flag_head=flag_head+1; 
	}
	if(se==true) 
	{
		cout<<"\n";
		cout<<"倒序输出 : \n";
		cout<<"目标状态 : ";
		for(int i=0;i<9;i=i+1)
			cout<<end.nine[i]<<" ";
		cout<<"\n";
		flag_head=node[flag_head].father;
		while(flag_head!=1)
		{
			cout<<"           ";
			for(int i=0;i<9;i=i+1)
				cout<<node[flag_head].nine[i]<<" ";
			cout<<"\n";
			flag_head=node[flag_head].father;
		}
		cout<<"初始状态 : ";
		for(int i=0;i<9;i=i+1)
			cout<<start.nine[i]<<" ";
		cout<<"\n";
	}
}

int main()
{
	cout<<"   八数码问题   \n";
	cout<<"----------------\n";
	Eight en;
	en.Init();
	en.Solve();
	return 0;
}
